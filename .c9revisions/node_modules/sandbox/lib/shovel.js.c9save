{"ts":1345166021630,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// shovel.js - Do the heavy lifting in this sandbox\n// Gianni Chiappetta - gf3.ca - 2010\n\n/* ------------------------------ INIT ------------------------------ */\nvar util = require( 'util' )\n  , code\n  , result\n  , console\n  , sandbox\n  , Script\n  , stdin;\n\nif ( ! ( Script = process.binding( 'evals').NodeScript ) )\n  if ( ! ( Script = process.binding('evals').Script ) )\n    Script = require( 'vm' );\n\n/* ------------------------------ Sandbox ------------------------------ */\nvar console = [];\n\n// Get code\ncode = '';\nstdin = process.openStdin();\nstdin.on( 'data', function( data ) {\n  code += data;\n})\nstdin.on( 'end', run );\n\nfunction getSafeRunner() {\n  var global = this;\n  // Keep it outside of strict mode\n  function UserScript(str) {\n    // We want a global scoped function that has implicit returns.\n    return Function('return eval('+JSON.stringify(str+'')+')');\n  }\n  // place with a closure that is not exposed thanks to strict mode\n  return function run(comm, src) {\n    // stop argument / caller attacks\n    \"use strict\";\n    var send = function send(event) {\n      \"use strict\";\n      //\n      // All comm must be serialized properly to avoid attacks, JSON or XJSON\n      //\n      comm.send(event, JSON.stringify([].slice.call(arguments,1)));\n    }\n    global.print = send.bind(global, 'stdout');\n    global.console = {};\n    global.console.log = send.bind(global, 'stdout');\n    var result = UserScript(src)();\n    send('end', result);\n  }\n}\n\n// Run code\nfunction run() {\n  var context = Script.createContext();\n  \n  // Setup Context\n//  var Robot = require('/libs/robot.js');\n  context.Robot = {\n    open: function(url) {\n        var request = require('request');\n\n        function syncRequest(url) {\n            var resultData = \"\";\n            request(url, function (error, response, body) {            \n                if (!error && response.statusCode == 200) {\n                    resultData = body; \n                }\n                else {\n                     resultData =response.statusCode; \n                }\n            });\n            return resultData;\n        }\n        \n        return syncRequest(\"http://www.test.com\");\n                 \n//        function (url, callback) {\n//        \n//        request(url, function (error, response, body) {\n//            if (!error && response.statusCode == 200) {\n//                callback(body); // \n//            }\n//        })\n    }\n  };\n  \n  \n  var safeRunner = Script.runInContext('('+getSafeRunner.toString()+')()', context);\n  var result;\n  try {\n    safeRunner({\n      send: function (event, value) {\n        \"use strict\";\n        switch (event) {\n          case 'stdout':\n            console.push.apply(console, JSON.parse(value).slice(1));\n            break;\n          case 'end':\n            result = JSON.parse(value)[0];\n            break;\n        }\n      }\n    }, code);\n  }\n  catch (e) {\n    result = e.name + ': ' + e.message;\n  }\n  \n  process.stdout.on( 'drain', function() {\n    process.exit(0)\n  });\n  \n  process.stdout.write( JSON.stringify( { result: util.inspect( result ), console: console } ) );\n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3100}]],"length":3100}
