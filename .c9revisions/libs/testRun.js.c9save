{"ts":1350843510019,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"exports.load = function () {\n\n    // Constructor\n    var testRunCls = { \n        startTime: Date.now(),\n        robotCount: 0,\n        robots: [],   \n        pass: false\n    };\n    \n    // Use the i protocall to create robot tests\n    testRunCls.test = function (i, callback) {       \n        \n        // This is the wrapping call to log the request.\n        var finish = function (finishResult) {\n            var mongo = require('../libs/mongo.js');\n            testRunCls.endTime = Date.now();\n            testRunCls.elaspedTime = testRunCls.endTime - testRunCls.startTime;\n            // testRunCls.finish = finishResult;\n            testRunCls.robotCount = testRunCls.robots.length;\n            mongo.insert('testResults', testRunCls, function(obj) { \n                callback(testRunCls);\n            });\n        };        \n        \n        var async = require(\"async\");\n        async.forEach(\n            i.tests, \n            // iterator\n            function (currTest, asyncCallback) {          \n                var robot = require('../libs/robot.js');\n                robotOpen(robot, currTest, function () {  \n                    testRunCls.robots.push({\n                        url: robot.url,\n                        asserts: robot.asserts,\n                        statusCode: robot.statusCode,\n                        error: robot.error,\n                        result: robot.result,\n                        pass: robot.pass\n                    });\n                    \n                    // todo: add a method to get results from the rpbot\n                    robot.asserts = []; // something is not right but this clears it, the object is killing assets across robot opens?\n                    asyncCallback();\n                });                \n            },\n            // end iterator\n            // callback\n            function(err) {\n                testRunCls.endTime = Date.now();\n                if(err !== null) {                    \n                    finish(\"it's cool\");                 \n                }\n                else {\n                    finish(\"it's not cool! \" + err);       \n                }\n            } // end callback\n        ); // end async.forEach        \n    };    \n    \n    // Create a single robot instruction\n    function robotOpen(robot, currentTest, callback) {        \n        robot.open(\n            \"test\", \n            currentTest.url, \n            function (result) {                \n                for (var j = 0; j < currentTest.checks.length; j++) {\n                    performCheck(robot, currentTest.checks[j]);\n                }\n                callback(robot);\n            }\n        );\n    }\n    \n    // Perform a single check, using reflection    \n    function performCheck(robot, check) {\n        var currentValidation = robot.check(check.selector);        \n        if(typeof currentValidation[check.assert.assertType] !== 'function')\n            throw \"assertType does not define a function: \" + check.assert.assertType;\n            \n        currentValidation[check.assert.assertType](check.assert.expected);\n    }\n\n    return testRunCls;\n};"]],"start1":0,"start2":0,"length1":0,"length2":3116}]],"length":3116}
{"ts":1350845031377,"patch":[[{"diffs":[[0,"s: false"],[1,",\n        elaspedTime: 01"],[0,"\n    };\n"]],"start1":161,"start2":161,"length1":16,"length2":41}]],"length":3141,"saved":false}
{"ts":1350845095781,"patch":[[{"diffs":[[0,"alse"],[-1,",\n        elaspedTime: 01"],[0,"\n   "]],"start1":165,"start2":165,"length1":33,"length2":8}]],"length":3116,"saved":false}
